<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- #8.1 암호화처리 bean등록 -->
	<beans:bean 
		id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- #8.3 인증/권한 검사 설정 -->
	<!-- security에 의한 인증/권한 검사에서 정적파일 제외 -->
	<http security="none" pattern="/resources/**"/>
	
	<http auto-config="true">
		<intercept-url pattern="/" access="permitAll"/>
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/program/**" access="permitAll"/>
		<intercept-url pattern="/notice/mainNotice.do" access="permitAll"/>
		<intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
		<intercept-url pattern="/notice/noticeForm.do" access="hasRole('ADMIN')"/>
		<intercept-url pattern="/sharing/boardForm.do" access="isAuthenticated()"/>
		<intercept-url pattern="/sharing/boardUpdate.do" access="isAuthenticated()"/>
		<intercept-url pattern="/question/questionForm.do" access="isAuthenticated()"/>
		<intercept-url pattern="/question/questionList.do" access="isAuthenticated()"/>
		<intercept-url pattern="/goods/goodsCart.do" access="isAuthenticated()"/>
		<intercept-url pattern="/goods/goodsOrder.do" access="isAuthenticated()"/>
		<intercept-url pattern="/member/memberLogin.do" access="permitAll"/>
		<intercept-url pattern="/member/memberEnroll.do" access="permitAll"/>
		<intercept-url pattern="/member/memberFindId.do" access="permitAll"/>
		<intercept-url pattern="/member/memberFindById.do" access="permitAll"/>
		<intercept-url pattern="/member/memberFindPassword.do" access="permitAll"/>
		<intercept-url pattern="/member/memberFindByPassword.do" access="permitAll"/>
		<intercept-url pattern="/member/checkIdDuplicate.do" access="permitAll"/>
		<intercept-url pattern="/member/checkIdDuplicate2.do" access="permitAll"/>
		<intercept-url pattern="/member/checkNicknameDuplicate.do" access="permitAll"/>
		<intercept-url pattern="/member/checkEmailDuplicate.do" access="permitAll"/>
		<intercept-url pattern="/member/**" access="isAuthenticated()"/>
		
		
		
<!-- 		<intercept-url pattern="/**" access="isAuthenticated()"/>   모든 주소에 대하여 인증된 사람만 접근 가능하도록 -->
		
		<!-- 커스텀 로그인 설정 -->
		<!-- login-page : 커스텀 로그인 폼 페이지. 핸들러 작성 필요 -->
		<!-- login-processing-url : security가 인증을 처리할 주소. loginForm이 제출(POST)될 주소.  핸들러 작성 불필요 -->
		<form-login 
			login-page="/member/memberLogin.do"
			login-processing-url="/member/memberLogin.do"
			username-parameter="id"
			password-parameter="password"
			authentication-failure-forward-url="/member/memberLoginError.do"
			/>
		
		

		
		<!-- logout-url : 핸들러 작성 불필요 -->
		<!-- logout-success-url : 로그아웃 후 리다이렉트 url (기본값: /login?logout) -->
		<logout 
			logout-url="/member/memberLogout.do"
			/>
			
		<access-denied-handler error-page="/error/accessDenied.do"/>
		
		
		<!-- csrf 공격대비 기능(지금은 꺼놨지만 나중에 켜아함)(이거 true 해놓고 나서부터 주소창에 logout 써서 로그아웃 할 수 있음 -->
		<!-- 
			Cross-site Request Forgery
			특정 권한이 있는 사용자로 하여금 해커가 유도한 행동을 하게 함으로써 보안을 취약하게 하거나 개인정보를 탈취하는 기법
		 -->
		<!-- <csrf disabled="true"/> -->
		
		<!-- 
			remember-me
			- token-validity-seconds : 초단위 토큰유효시간을 설정(60 * 60 * 24 * 14)
		 -->
		<remember-me
			data-source-ref="dataSource"
			token-validity-seconds="1209600"/>
	</http>
	
	<authentication-manager>
		<authentication-provider user-service-ref="securityService">
			<password-encoder ref="bcryptPasswordEncoder"/>
		</authentication-provider>
	</authentication-manager>
		
	<context:component-scan base-package="com.kh.security"/>
		
</beans:beans>
